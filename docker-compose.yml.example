networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mariadb:
    driver: ${VOLUMES_DRIVER}
  phpmyadmin:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}

services:
  nginx:
    container_name: nginx
    build:
      context: ./services/nginx
      args:
        - PUSER=${PUSER}
        - PUID=${PUID}
        - PGID=${PGID}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${LOG_PATH_HOST}/nginx:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      - ${NGINX_CERTBOT_PATH}:/var/www/letsencrypt
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    networks:
      - frontend
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    profiles:
      - nginx
      - dev
      - prod
      - frontend
      - backend

  php-fpm-alpine:
    container_name: php-alpine
    build:
      context: ./services/php-fpm/alpine
      args:
        - PHP_VERSION=${PHP_VERSION}
        - PUSER=${PUSER}
        - PUID=${PUID}
        - PGID=${PGID}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ./services/php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
    expose:
      - "9000"
    networks:
      - backend
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    restart: unless-stopped
    profiles:
      - php-fpm
      - dev
      - prod
      - backend

  php-fpm:
    container_name: php
    build:
      context: ./services/php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION}
        - PUSER=${PUSER}
        - PUID=${PUID}
        - PGID=${PGID}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ./services/php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
    expose:
      - "9000"
    networks:
      - backend
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    restart: unless-stopped
    profiles:
      - php-fpm
      - dev
      - prod
      - backend

  mariadb:
    container_name: mariadb
    build:
      context: ./services/mariadb
      args:
        - http_proxy
        - https_proxy
        - no_proxy
        - MARIADB_VERSION=${MARIADB_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/mariadb:/var/lib/mysql
      - ${MARIADB_CONF_PATH}:/etc/mysql/conf.d/my.cnf
      - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    environment:
      - TZ=${TIMEZONE}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    ports:
      - "${MARIADB_PORT}:3306"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-p${MARIADB_ROOT_PASSWORD}"
        ]
      retries: 3
      timeout: 5s
    profiles:
      - mariadb
      - dev
      - prod
      - db

  phpmyadmin:
    container_name: phpmyadmin
    build: ./services/phpmyadmin
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=mariadb
      - MYSQL_USER=${PMA_USER}
      - MYSQL_PASSWORD=${PMA_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
      - MAX_EXECUTION_TIME=${PMA_MAX_EXECUTION_TIME}
      - MEMORY_LIMIT=${PMA_MEMORY_LIMIT}
      - UPLOAD_LIMIT=${PMA_UPLOAD_LIMIT}
    ports:
      - "${PMA_PORT}:80"
    networks:
      - frontend
      - backend
    depends_on:
      - "${PMA_DB_ENGINE}"
    restart: unless-stopped
    profiles:
      - phpmyadmin
      - dev
      - prod
      - db

  redis:
    container_name: redis
    build:
      context: ./services/redis
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      retries: 3
      timeout: 5s
    profiles:
      - redis
      - dev
      - prod
      - cache

  composer:
    build:
      context: ./services/php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION}
        - PUSER=${PUSER}
        - PUID=${PUID}
        - PGID=${PGID}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    networks:
      - backend
    working_dir: ${APP_CODE_PATH_CONTAINER}
    entrypoint: [ 'composer' ]
    profiles:
      - composer
      - tool

  react:
    container_name: react
    build:
      context: ./services/npm
      args:
        - NODE_VERSION=${NODE_VERSION}
        - REACT_APP_NAME=${REACT_APP_NAME}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    ports:
      - "${REACT_APP_PORT}:5173"
    networks:
      - frontend
      - backend
    working_dir: ${APP_CODE_PATH_CONTAINER}/${REACT_APP_NAME}
    command: sh -c "npm run dev"
    restart: unless-stopped
    profiles:
      - react
      - prod
      - frontend

  vite:
    container_name: vite
    build:
      context: ./services/npm
      args:
        - NODE_VERSION=${NODE_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    ports:
      - "5173:5173"
    networks:
      - frontend
    working_dir: ${APP_CODE_PATH_CONTAINER}
    command: sh -c "npm install -D tailwindcss postcss autoprefixer @tailwindcss/forms tailwind-scrollbar prettier prettier-plugin-tailwindcss @shufo/prettier-plugin-blade && npx tailwindcss init -p && npm run dev"
    restart: unless-stopped
    profiles:
      - vite
      - frontend
      - dev
      - tool

  npm:
    container_name: npm
    build:
      context: ./services/npm
      args:
        - NODE_VERSION=${NODE_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    networks:
      - frontend
    entrypoint: [ "npm" ]
    profiles:
      - npm
      - tool

  mailhog:
    container_name: mailhog
    build: ./services/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    logging:
      driver: 'none'
    networks:
      - frontend
      - backend
    profiles:
      - mailhog
      - tool

  laravel-horizon:
    container_name: laravel-horizon
    build:
      context: ./services/laravel
      args:
        - PUSER=${PUSER}
        - PHP_VERSION=${PHP_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ./services/laravel/supervisord.d/laravel-horizon.conf:/etc/supervisord.d/laravel-horizon.conf
      - ./services/laravel/supervisord.conf:/etc/supervisord.conf
    networks:
      - backend
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    depends_on:
      - php-fpm
    restart: unless-stopped
    profiles:
      - laravel-horizon
      - laravel

  laravel-schedule:
    container_name: laravel-schedule
    build:
      context: ./services/laravel
      args:
        - PHP_VERSION=${PHP_VERSION}
        - PUSER=${PUSER}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ./services/laravel/supervisord.d/laravel-schedule.conf:/etc/supervisord.d/laravel-schedule.conf
      - ./services/laravel/supervisord.conf:/etc/supervisord.conf
    networks:
      - backend
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    depends_on:
      - php-fpm
    restart: unless-stopped
    profiles:
      - laravel-schedule
      - laravel

  laravel-echo-server:
    container_name: laravel-echo
    build:
      context: ./services/laravel/echo-server
    volumes:
      - ./services/laravel/echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
    ports:
      - "${LARAVEL_ECHO_SERVER_PORT}:6001"
    links:
      - redis
    networks:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - laravel-echo
      - laravel
